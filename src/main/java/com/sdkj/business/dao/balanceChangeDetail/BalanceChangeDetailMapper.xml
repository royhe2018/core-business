<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sdkj.business.dao.balanceChangeDetail.BalanceChangeDetailMapper">
  <resultMap id="BaseResultMap" type="com.sdkj.business.domain.po.BalanceChangeDetail">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="balance_before_change" jdbcType="REAL" property="balanceBeforeChange" />
    <result column="balance_after_change" jdbcType="REAL" property="balanceAfterChange" />
    <result column="change_amount" jdbcType="REAL" property="changeAmount" />
    <result column="change_time" jdbcType="VARCHAR" property="changeTime" />
    <result column="change_type" jdbcType="INTEGER" property="changeType" />
    <result column="item_id" property="itemId" />
  </resultMap>
  <select id="findSingleBalanceChange" parameterType="java.util.Map" resultMap="BaseResultMap">
    select *
    from sdlh_balance_change_detail
    where id = #{id,jdbcType=BIGINT}
    <trim prefix="where" prefixOverrides="and">
    	<if test="id != null">and id = #{id}</if>
    </trim>
  </select>
  <select id="findBalanceChangeList" parameterType="java.util.Map" resultMap="BaseResultMap">
    select *
    from sdlh_balance_change_detail c
    <trim prefix="where" prefixOverrides="and">
    	<if test="userId != null">and c.`belong_type`=1 and c.`belong_id` = #{userId}</if>
    </trim>
    order by id desc
  </select>
  
  <select id="findUserPerformance" parameterType="java.util.Map" resultType="java.util.Map">
    SELECT SUM(c.`change_amount`) AS totalChange
	FROM `sdlh_balance_change_detail` c
    <trim prefix="where" prefixOverrides="and">
    	and c.change_type IN (1,2)
    	<if test="userId != null">and c.`belong_type`=1 and c.`belong_id` = #{userId}</if>
    	<if test="startTime != null"><![CDATA[and c.`change_time`> #{startTime}]]></if>
    	<if test="endTime != null"><![CDATA[AND c.`change_time`< #{endTime}]]></if>
    </trim>
  </select>
  
  <select id="findUserPerformanceDetail" parameterType="java.util.Map" resultType="java.util.Map">
	SELECT CASE WHEN u.`nick_name` IS NOT NULL THEN u.`nick_name` ELSE u.`account` END AS userName,c.`change_amount` AS changeMoney,LEFT(c.`change_time`,10) AS changeDate
	FROM `sdlh_balance_change_detail` c
	INNER JOIN `sdlh_order_info` o ON c.`item_id`=o.`id`
	INNER JOIN `sdlh_user` u ON o.`user_id`=u.id
    <trim prefix="where" prefixOverrides="and">
    	and c.change_type IN (1,2)
    	<if test="userId != null">and c.`belong_type`=1 and c.`belong_id` = #{userId}</if>
    	<if test="startTime != null"><![CDATA[and c.`change_time`> #{startTime}]]></if>
    	<if test="endTime != null"><![CDATA[AND c.`change_time`< #{endTime}]]></if>
    </trim>
    ORDER BY c.`id` DESC
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sdlh_balance_change_detail
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.sdkj.business.domain.po.BalanceChangeDetail" useGeneratedKeys="true" >
        insert into sdlh_balance_change_detail (id, belong_id,belong_type, balance_before_change, 
      balance_after_change, change_amount, change_time, 
      change_type,item_id)
    values (#{id,jdbcType=BIGINT}, #{belongId,jdbcType=BIGINT}, #{belongType,jdbcType=BIGINT}, #{balanceBeforeChange,jdbcType=REAL}, 
      #{balanceAfterChange,jdbcType=REAL}, #{changeAmount,jdbcType=REAL}, #{changeTime,jdbcType=VARCHAR}, 
      #{changeType,jdbcType=INTEGER},#{itemId})
  </insert>
  <update id="update" parameterType="com.sdkj.business.domain.po.BalanceChangeDetail">
    update sdlh_balance_change_detail
    <set>      
      <if test="balanceBeforeChange != null">
        balance_before_change = #{balanceBeforeChange,jdbcType=REAL},
      </if>
      <if test="balanceAfterChange != null">
        balance_after_change = #{balanceAfterChange,jdbcType=REAL},
      </if>
      <if test="changeAmount != null">
        change_amount = #{changeAmount,jdbcType=REAL},
      </if>
      <if test="changeTime != null">
        change_time = #{changeTime,jdbcType=VARCHAR},
      </if>
      <if test="changeType != null">
        change_type = #{changeType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>